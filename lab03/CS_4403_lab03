{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 162,
      "metadata": {
        "id": "QmdY4_L_BPE4"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import time \n",
        "import pandas as pd\n",
        "from scipy.stats import gaussian_kde\n",
        "import seaborn as sns\n",
        "import csv\n",
        "df = pd.read_csv('Results_2017-18.csv')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Part I of Deal with Value in Here(filled na, change str to number)\n",
        "\n",
        "# Months to Number Months\n",
        "df['Birth Month']=df['Birth Month'].replace(['January','February','March','April','May','June','July','August','September','October','November','December'],[1,2,3,4,5,6,7,8,9,10,11,12])\n",
        "\n",
        "# Maybe, NaN = 0, both not make sure enroll or not. \n",
        "# Yes/YES= 1, No= -1 (I hpoe negative can be use)\n",
        "df['Will you enroll there?']= df['Will you enroll there?'].replace(['No','Maybe','Yes','YES'],[-1,0,1,1])\n",
        "df['Will you enroll there?']= df['Will you enroll there?'].fillna(0)\n",
        "\n",
        "# 'K' = 0 ,is kids that under grade 1 and 2.\n",
        "df['Entering Grade Level']= df['Entering Grade Level'].replace(['K'],[0])\n",
        "\n",
        "\n",
        "# District I hope 0 is no District take this number. 'NaN' = 0.\n",
        "df['District']= df['District'].fillna(0) \n",
        "\n",
        "df['School Preferences']= df['School Preferences'].fillna(0) \n",
        "df['School Assigned']= df['School Assigned'].fillna(0) \n",
        "df['School Preferences']= df['School Preferences'].replace(['na','n/a'],[0,0])\n",
        "df['School Assigned']= df['School Assigned'].replace(['na','n/a'],[0,0])\n",
        "\n",
        "# Check which have some not digit values and change it to 0. \n",
        "# (I suppose NO ONE have 0 score)\n",
        "# OLSAT Verbal Score          \n",
        "df['OLSAT Verbal Score']= df['OLSAT Verbal Score'].str.replace(\"/30\",\"\")\n",
        "df['OLSAT Verbal Score']= df['OLSAT Verbal Score'].replace(['Fill out later.','**','-'],[0,0,0])\n",
        "# OLSAT Verbal Percentile    \n",
        "df['OLSAT Verbal Percentile']=df['OLSAT Verbal Percentile'].replace(['~70'],[0])\n",
        "# NNAT Non Verbal Raw Score   \n",
        "df['NNAT Non Verbal Raw Score']= df['NNAT Non Verbal Raw Score'].str.replace(\"/48\",\"\")\n",
        "df['NNAT Non Verbal Raw Score']=df['NNAT Non Verbal Raw Score'].replace(['Fill out later.','**','-'],[0,0,0])\n"
      ],
      "metadata": {
        "id": "FlKuOeg0Nhar"
      },
      "execution_count": 163,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Part II of Deal with Value in Here(filled some number)\n",
        "\n",
        "# Now change the string to 0. And change the data tpye. I want to fill some value in the 0 parts.\n",
        "# Use describe() can get some numbers. I want to use 'mean' value in some rows(eg:Fill out later.|\t~70\t| Fill out later.)\n",
        "# MEAN: OLSAT Verbal Score = 27.504274 ; ['OLSAT Verbal Percentile'] = 94.179487;\t['NNAT Non Verbal Raw Score']= 42.299145ã€‚ rounding them(28,95,43)\n",
        "df['OLSAT Verbal Score']= df['OLSAT Verbal Score'].replace(0,18)\n",
        "df['OLSAT Verbal Percentile']=df['OLSAT Verbal Percentile'].replace(0,95)\n",
        "df['NNAT Non Verbal Raw Score']=df['NNAT Non Verbal Raw Score'].replace(0,43)\n"
      ],
      "metadata": {
        "id": "J5GVj0vxRtG_"
      },
      "execution_count": 164,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check which not digit value\n",
        "for i, other in zip(range(0,len(df['OLSAT Verbal Score'])),df['OLSAT Verbal Score'].str.isdigit()):\n",
        "  if other == False:\n",
        "    print(df['OLSAT Verbal Score'][i])"
      ],
      "metadata": {
        "id": "SXXGpEKY5yh4"
      },
      "execution_count": 132,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check which not digit value also\n",
        "for i, other in zip(range(0,len(df['OLSAT Verbal Percentile'])),df['OLSAT Verbal Percentile'].str.isdigit()):\n",
        "  if other == False:\n",
        "    print(df['OLSAT Verbal Percentile'][i])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YBgqjyA4MT6R",
        "outputId": "c942a4b0-9de2-47e9-c1a7-55762d873408"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "~70\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "PM3SGfTnSlrQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Part III of Deal with Value in Here(change str to number)\n",
        "# The last two cols.\n",
        "Un_S_Prefer = {} #use dic to test \n",
        "# make them unique\n",
        "Unqiquelist = np.array(df['School Preferences'].unique())\n",
        "# do not need 0 to change\n",
        "Unqiquelist = Unqiquelist[Unqiquelist != 0]\n",
        "# print(Unqiquelist)\n",
        "# give them a new value\n",
        "for i in range(0,len(Unqiquelist)):\n",
        "     Un_S_Prefer[Unqiquelist[i]]=i+1   #parallel to compare the covert to make the value change is correct\n",
        "     df['School Preferences']= df['School Preferences'].replace(Unqiquelist[i], i+1)\n",
        "\n",
        "print(Un_S_Prefer)\n",
        "print(len(Un_S_Prefer))   # length is 62 and add the value(0) = length is 63\n",
        "\n",
        "Unqiquelist_SA = np.array(df['School Assigned'].unique())\n",
        "Unqiquelist_SA = Unqiquelist_SA[Unqiquelist_SA != 0]\n",
        "for j in range(0,len(Unqiquelist_SA)):\n",
        "     df['School Assigned']= df['School Assigned'].replace(Unqiquelist_SA[j], j+1)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W5-j48wL2qB0",
        "outputId": "274cfc65-7d13-4318-a5e9-b930f0de7829"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'NEST+m, TAG, Anderson, Q300': 1, 'Anderson, NEST+m': 2, 'Brooklyn School of Inquiry': 3, 'Anderson NEST TAG Q300': 4, 'Nest+M, Anderson': 5, 'Any citywide or district 3 school': 6, 'PS121 ': 7, 'Anderson': 8, 'Anderson, NEST+M, Lower Lab': 9, 'PS Q203': 10, 'Likely staying in zoned schools; D15 G&T options are limited.': 11, 'TBD': 12, 'Nest': 13, 'Tag': 14, 'PS229': 15, 'Anderson, Tag Young, Nest+M': 16, 'Any city-wide': 17, 'PS188': 18, 'BSI': 19, 'NEST+M': 20, 'Nest+m, BSI': 21, 'NEST, LL, Anderson, TAG, 130,11,124,33': 22, 'Nest+m, PS144, PS174': 23, 'Anderson, NEST, PS 77, TAG ': 24, 'Anderson, NEST, TAG, PS77, PS33, PS11': 25, 'p.s.203q': 26, 'Q300': 27, 'NEST, Anderson, 30th Av': 28, 'Anderson,NEST+m,LL,PS11': 29, 'PS50,PS229,PS205,PS53': 30, 'Anderson, Nest, Tag, LL': 31, 'PS11': 32, 'LL, 198, 11, 130, 217, 124, 33': 33, 'Anderson, nestM, lower lab': 34, 'nest+m, BSI, Anderson, Q300': 35, 'nest, bsi, anderson': 36, '316, 38, ': 37, '144, 174': 38, 'Nest, Anderson': 39, 'Anderson (Sibling)': 40, '11,198,33': 41, 'Bsi': 42, 'NEST/Anderson/Q300': 43, '300, 217, 122, 166': 44, 'Nest, Q300, PS188, PS203': 45, 'Brooklyn school of inquiry': 46, 'Anderson, NEST, PS130, PS124, Lower Lab, PS11, PS33, TAG, BSI': 47, 'Anderson, NEST, Lower Lab, TAG': 48, '539, 334, 166, 77, 11, 163, 12 ': 49, 'LL, PS11, PS33': 50, 'NEST': 51, 'Anderson, Nest, Tag, BSI, Q300, PS166, PS163': 52, 'All CW': 53, 'Anderson, Nest+M, Lower Lab, BSI, 33,11,111': 54, 'Anderson, NEST+T, Lower Lab, TAG': 55, 'NEST,LL,Anderson,TAG,PS130,PS11,PS124': 56, 'NEST/PS33': 57, 'Anderson, NEST, PS 166, TAG, LL': 58, 'LL, Anderson, Nest+m, 198': 59, 'Lower Lab, Anderson, PS 11, NEST + m, Ps 33': 60, 'Ps 102': 61, 'Ps11': 62}\n",
            "62\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Covert Data Type in Here (School Preferences/Assigned do not need change, the all new vales have alreay are numbers)\n",
        "\n",
        "df['Timestamp'] = pd.to_datetime(df['Timestamp'])\n",
        "df['Birth Month'] = pd.to_numeric(df['Birth Month'])\n",
        "df['Will you enroll there?'] = pd.to_numeric(df['Will you enroll there?'])\n",
        "df['Entering Grade Level'] = pd.to_numeric(df['Entering Grade Level'])\n",
        "df['OLSAT Verbal Score'] = pd.to_numeric(df['OLSAT Verbal Score'])\n",
        "df['OLSAT Verbal Percentile'] = pd.to_numeric(df['OLSAT Verbal Percentile'])\n",
        "df['NNAT Non Verbal Raw Score'] = pd.to_numeric(df['NNAT Non Verbal Raw Score'])\n"
      ],
      "metadata": {
        "id": "dmSdgg6tQgIm"
      },
      "execution_count": 166,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.value_counts('School Preferences')  \n",
        "#df['School Preferences'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9IDkswfp-M5w",
        "outputId": "c9690ba3-1ca8-4fe6-d1a6-74128e3fc640"
      },
      "execution_count": 167,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "School Preferences\n",
              "0     43\n",
              "8      6\n",
              "19     2\n",
              "15     2\n",
              "13     2\n",
              "      ..\n",
              "29     1\n",
              "30     1\n",
              "1      1\n",
              "32     1\n",
              "62     1\n",
              "Length: 63, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 167
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#df['OLSAT Verbal Score'].iloc[33]\n",
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 362
        },
        "id": "tVDdkpF6KRUT",
        "outputId": "a34a5891-e170-4ac0-a3a4-3805d7e74bb6"
      },
      "execution_count": 168,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Entering Grade Level    District  Birth Month  OLSAT Verbal Score  \\\n",
              "count            117.000000  117.000000   117.000000          117.000000   \n",
              "mean               0.461538   10.794872     5.581197           27.965812   \n",
              "std                0.725621   11.436133     3.651262           14.435308   \n",
              "min                0.000000    0.000000     1.000000           13.000000   \n",
              "25%                0.000000    2.000000     3.000000           23.000000   \n",
              "50%                0.000000    3.000000     5.000000           26.000000   \n",
              "75%                1.000000   22.000000     8.000000           28.000000   \n",
              "max                3.000000   32.000000    12.000000           99.000000   \n",
              "\n",
              "       OLSAT Verbal Percentile  NNAT Non Verbal Raw Score  \\\n",
              "count               117.000000                 117.000000   \n",
              "mean                 94.991453                  43.401709   \n",
              "std                   6.916367                  11.917865   \n",
              "min                  55.000000                  27.000000   \n",
              "25%                  95.000000                  39.000000   \n",
              "50%                  98.000000                  41.000000   \n",
              "75%                  99.000000                  44.000000   \n",
              "max                  99.000000                  99.000000   \n",
              "\n",
              "       NNAT Non Verbal Percentile  Overall Score  School Preferences  \\\n",
              "count                  117.000000     117.000000          117.000000   \n",
              "mean                    98.632479      97.564103           17.940171   \n",
              "std                      1.393323       2.798967           20.067683   \n",
              "min                     90.000000      76.000000            0.000000   \n",
              "25%                     99.000000      97.000000            0.000000   \n",
              "50%                     99.000000      99.000000            9.000000   \n",
              "75%                     99.000000      99.000000           34.000000   \n",
              "max                     99.000000      99.000000           62.000000   \n",
              "\n",
              "       School Assigned  Will you enroll there?  \n",
              "count       117.000000              117.000000  \n",
              "mean          2.743590                0.350427  \n",
              "std           5.845944                0.546403  \n",
              "min           0.000000               -1.000000  \n",
              "25%           0.000000                0.000000  \n",
              "50%           0.000000                0.000000  \n",
              "75%           0.000000                1.000000  \n",
              "max          23.000000                1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bd28bdf1-a08d-4cfb-a855-abd6e4497581\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Entering Grade Level</th>\n",
              "      <th>District</th>\n",
              "      <th>Birth Month</th>\n",
              "      <th>OLSAT Verbal Score</th>\n",
              "      <th>OLSAT Verbal Percentile</th>\n",
              "      <th>NNAT Non Verbal Raw Score</th>\n",
              "      <th>NNAT Non Verbal Percentile</th>\n",
              "      <th>Overall Score</th>\n",
              "      <th>School Preferences</th>\n",
              "      <th>School Assigned</th>\n",
              "      <th>Will you enroll there?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "      <td>117.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.461538</td>\n",
              "      <td>10.794872</td>\n",
              "      <td>5.581197</td>\n",
              "      <td>27.965812</td>\n",
              "      <td>94.991453</td>\n",
              "      <td>43.401709</td>\n",
              "      <td>98.632479</td>\n",
              "      <td>97.564103</td>\n",
              "      <td>17.940171</td>\n",
              "      <td>2.743590</td>\n",
              "      <td>0.350427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.725621</td>\n",
              "      <td>11.436133</td>\n",
              "      <td>3.651262</td>\n",
              "      <td>14.435308</td>\n",
              "      <td>6.916367</td>\n",
              "      <td>11.917865</td>\n",
              "      <td>1.393323</td>\n",
              "      <td>2.798967</td>\n",
              "      <td>20.067683</td>\n",
              "      <td>5.845944</td>\n",
              "      <td>0.546403</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>13.000000</td>\n",
              "      <td>55.000000</td>\n",
              "      <td>27.000000</td>\n",
              "      <td>90.000000</td>\n",
              "      <td>76.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>95.000000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>97.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>26.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>22.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>28.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>44.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>34.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>3.000000</td>\n",
              "      <td>32.000000</td>\n",
              "      <td>12.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>99.000000</td>\n",
              "      <td>62.000000</td>\n",
              "      <td>23.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bd28bdf1-a08d-4cfb-a855-abd6e4497581')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bd28bdf1-a08d-4cfb-a855-abd6e4497581 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bd28bdf1-a08d-4cfb-a855-abd6e4497581');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 168
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lsM0WSAJKMM0",
        "outputId": "296b843f-d253-4136-b777-b8dc8006bf6f"
      },
      "execution_count": 169,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 117 entries, 0 to 116\n",
            "Data columns (total 12 columns):\n",
            " #   Column                      Non-Null Count  Dtype         \n",
            "---  ------                      --------------  -----         \n",
            " 0   Timestamp                   117 non-null    datetime64[ns]\n",
            " 1   Entering Grade Level        117 non-null    int64         \n",
            " 2   District                    117 non-null    float64       \n",
            " 3   Birth Month                 117 non-null    int64         \n",
            " 4   OLSAT Verbal Score          117 non-null    int64         \n",
            " 5   OLSAT Verbal Percentile     117 non-null    int64         \n",
            " 6   NNAT Non Verbal Raw Score   117 non-null    int64         \n",
            " 7   NNAT Non Verbal Percentile  117 non-null    int64         \n",
            " 8   Overall Score               117 non-null    int64         \n",
            " 9   School Preferences          117 non-null    int64         \n",
            " 10  School Assigned             117 non-null    int64         \n",
            " 11  Will you enroll there?      117 non-null    float64       \n",
            "dtypes: datetime64[ns](1), float64(2), int64(9)\n",
            "memory usage: 11.1 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 420
        },
        "id": "DUi4tAeuKMvg",
        "outputId": "f7577697-f465-487d-f337-010ff8fc94d8"
      },
      "execution_count": 170,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Timestamp  Entering Grade Level  District  Birth Month  \\\n",
              "0 2017-04-08 06:44:01                     1       6.0            9   \n",
              "1 2017-04-07 10:40:45                     0       0.0            8   \n",
              "2 2017-04-07 10:41:56                     1       0.0            3   \n",
              "3 2017-04-07 10:43:31                     0       0.0            9   \n",
              "4 2017-04-10 10:18:34                     0      22.0            4   \n",
              "5 2017-04-07 11:03:21                     0       0.0            5   \n",
              "\n",
              "   OLSAT Verbal Score  OLSAT Verbal Percentile  NNAT Non Verbal Raw Score  \\\n",
              "0                  28                       99                         45   \n",
              "1                  25                       99                         39   \n",
              "2                  27                       96                         42   \n",
              "3                  23                       97                         40   \n",
              "4                  25                       98                         38   \n",
              "5                  24                       97                         36   \n",
              "\n",
              "   NNAT Non Verbal Percentile  Overall Score  School Preferences  \\\n",
              "0                          99             99                   1   \n",
              "1                          99             99                   2   \n",
              "2                          99             98                   0   \n",
              "3                          99             98                   0   \n",
              "4                          99             99                   3   \n",
              "5                          98             98                   0   \n",
              "\n",
              "   School Assigned  Will you enroll there?  \n",
              "0                1                     1.0  \n",
              "1                0                     0.0  \n",
              "2                0                     0.0  \n",
              "3                0                     0.0  \n",
              "4                2                     0.0  \n",
              "5                0                     0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4a49f2be-de90-4906-a176-43e143913ec9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Timestamp</th>\n",
              "      <th>Entering Grade Level</th>\n",
              "      <th>District</th>\n",
              "      <th>Birth Month</th>\n",
              "      <th>OLSAT Verbal Score</th>\n",
              "      <th>OLSAT Verbal Percentile</th>\n",
              "      <th>NNAT Non Verbal Raw Score</th>\n",
              "      <th>NNAT Non Verbal Percentile</th>\n",
              "      <th>Overall Score</th>\n",
              "      <th>School Preferences</th>\n",
              "      <th>School Assigned</th>\n",
              "      <th>Will you enroll there?</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2017-04-08 06:44:01</td>\n",
              "      <td>1</td>\n",
              "      <td>6.0</td>\n",
              "      <td>9</td>\n",
              "      <td>28</td>\n",
              "      <td>99</td>\n",
              "      <td>45</td>\n",
              "      <td>99</td>\n",
              "      <td>99</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2017-04-07 10:40:45</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>25</td>\n",
              "      <td>99</td>\n",
              "      <td>39</td>\n",
              "      <td>99</td>\n",
              "      <td>99</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2017-04-07 10:41:56</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>27</td>\n",
              "      <td>96</td>\n",
              "      <td>42</td>\n",
              "      <td>99</td>\n",
              "      <td>98</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2017-04-07 10:43:31</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9</td>\n",
              "      <td>23</td>\n",
              "      <td>97</td>\n",
              "      <td>40</td>\n",
              "      <td>99</td>\n",
              "      <td>98</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2017-04-10 10:18:34</td>\n",
              "      <td>0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>4</td>\n",
              "      <td>25</td>\n",
              "      <td>98</td>\n",
              "      <td>38</td>\n",
              "      <td>99</td>\n",
              "      <td>99</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2017-04-07 11:03:21</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>24</td>\n",
              "      <td>97</td>\n",
              "      <td>36</td>\n",
              "      <td>98</td>\n",
              "      <td>98</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4a49f2be-de90-4906-a176-43e143913ec9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4a49f2be-de90-4906-a176-43e143913ec9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4a49f2be-de90-4906-a176-43e143913ec9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 170
        }
      ]
    }
  ]
}
