{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "fO_dwLUa6qRP"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "import time \n",
        "import sys\n",
        "import operator\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from scipy.stats import gaussian_kde\n",
        "import seaborn as sns\n",
        "import csv\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.preprocessing import PolynomialFeatures  \n",
        "import statsmodels.api as sm\n",
        "from sklearn.metrics import r2_score \n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('Company_ad_buys_and_sales.csv')"
      ],
      "metadata": {
        "id": "ZQ87DzcPN0Ha"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df['Sales'].values   #    X = df.iloc[:, 1:2].values\n",
        "Y = df['TV'].values  #ndarray y = df.iloc[:, 2].values  # y = df['Salary'].values\n",
        "X= np.array(X)\n",
        "Y= np.array(Y)\n",
        "regr = LinearRegression()\n",
        "regr.fit(X.reshape(-1, 1),Y)\n",
        "\n",
        "print('Coefficients:', regr.coef_)#Coefficients: [712.59413615]\n",
        "print('Intercept:', regr.intercept_)#Intercept: 5049.009899813836\n",
        "\n",
        "plt.plot(X, regr.predict(X.reshape(-1, 1)), color='pink', linewidth=3)\n",
        "plt.scatter(X, Y, color='skyblue')\n",
        "plt.xlabel('Sales')\n",
        "plt.ylabel('TV')\n",
        "plt.show()\n",
        "\n",
        "#calculate predictions based on the regression line\n",
        "predicted = map(lambda new_x: regr.predict([new_x]),X.reshape(-1, 1))\n",
        "b = list(predicted)\n",
        "\n",
        "# calculate R-squared\n",
        "R_2 = r2_score(Y, b) \n",
        "print('R-squared, or the Coefficient of Determination =', R_2) \n",
        "\n",
        "X2 = sm.add_constant(X)\n",
        "est = sm.OLS(Y, X2)\n",
        "est2 = est.fit()\n",
        "print()\n",
        "print(est2.summary())\n",
        "print()\n",
        "r_squared = regr.score(X.reshape(-1, 1), Y)\n",
        "print('r_squared',r_squared)\n",
        "\n",
        "# predicting a new result\n",
        "Sales_to_estimate = 15\n",
        "TV_estimate = regr.predict([[Sales_to_estimate]])\n",
        "print('With a linear regression model, the Sales is', Sales_to_estimate, 'ad spends on TV is' ,TV_estimate[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "HUZNFEemkfdh",
        "outputId": "931fe80c-2da9-43e7-cdb8-c204d079a872"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [14.64309139]\n",
            "Intercept: -74.51479430029673\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R-squared, or the Coefficient of Determination = 0.8121757029987414\n",
            "\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       0.812\n",
            "Model:                            OLS   Adj. R-squared:                  0.811\n",
            "Method:                 Least Squares   F-statistic:                     856.2\n",
            "Date:                Wed, 08 Feb 2023   Prob (F-statistic):           7.93e-74\n",
            "Time:                        22:54:42   Log-Likelihood:                -1006.6\n",
            "No. Observations:                 200   AIC:                             2017.\n",
            "Df Residuals:                     198   BIC:                             2024.\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const        -74.5148      8.018     -9.293      0.000     -90.327     -58.703\n",
            "x1            14.6431      0.500     29.260      0.000      13.656      15.630\n",
            "==============================================================================\n",
            "Omnibus:                        9.122   Durbin-Watson:                   2.013\n",
            "Prob(Omnibus):                  0.010   Jarque-Bera (JB):                9.205\n",
            "Skew:                           0.519   Prob(JB):                       0.0100\n",
            "Kurtosis:                       3.162   Cond. No.                         48.9\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "\n",
            "r_squared 0.8121757029987414\n",
            "With a linear regression model, the Sales is 15 ad spends on TV is 145.13157657339883\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df['Sales']  \n",
        "Y = df['Radio'].values  #ndarray\n",
        "X= np.array(X)\n",
        "Y= np.array(Y)\n",
        "regr = LinearRegression()\n",
        "regr.fit(X.reshape(-1, 1),Y)\n",
        "\n",
        "print('Coefficients:', regr.coef_)#Coefficients: [712.59413615]\n",
        "print('Intercept:', regr.intercept_)#Intercept: 5049.009899813836\n",
        "\n",
        "plt.plot(X, regr.predict(X.reshape(-1, 1)), color='orange', linewidth=3)\n",
        "plt.scatter(X, Y, color='purple')\n",
        "plt.xlabel('Sales')\n",
        "plt.ylabel('Radio')\n",
        "plt.show()\n",
        "\n",
        "#calculate predictions based on the regression line\n",
        "predicted = map(lambda new_x: regr.predict([new_x]),X.reshape(-1, 1))\n",
        "b = list(predicted)\n",
        "\n",
        "# calculate R-squared\n",
        "R_2 = r2_score(Y, b) \n",
        "print('R-squared, or the Coefficient of Determination =', R_2) \n",
        "\n",
        "X2 = sm.add_constant(X)\n",
        "est = sm.OLS(Y, X2)\n",
        "est2 = est.fit()\n",
        "print()\n",
        "print(est2.summary())\n",
        "print()\n",
        "r_squared = regr.score(X.reshape(-1, 1), Y)\n",
        "print('r_squared',r_squared)\n",
        "\n",
        "# predicting a new result\n",
        "Sales_to_estimate = 10\n",
        "Radio_estimate = regr.predict([[Sales_to_estimate]])\n",
        "print('With a linear regression model, the Sales is', Sales_to_estimate, 'ad spends on Radio is' ,Radio_estimate[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "uraM7e-Gnpa1",
        "outputId": "f1bca547-09d8-4e30-9902-39a1e8cf2afa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [0.98240197]\n",
            "Intercept: 8.399766932372083\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R-squared, or the Coefficient of Determination = 0.12224190399478618\n",
            "\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       0.122\n",
            "Model:                            OLS   Adj. R-squared:                  0.118\n",
            "Method:                 Least Squares   F-statistic:                     27.57\n",
            "Date:                Wed, 08 Feb 2023   Prob (F-statistic):           3.88e-07\n",
            "Time:                        22:44:08   Log-Likelihood:                -809.81\n",
            "No. Observations:                 200   AIC:                             1624.\n",
            "Df Residuals:                     198   BIC:                             1630.\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const          8.3998      2.997      2.802      0.006       2.489      14.311\n",
            "x1             0.9824      0.187      5.251      0.000       0.613       1.351\n",
            "==============================================================================\n",
            "Omnibus:                       32.298   Durbin-Watson:                   1.998\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):                8.729\n",
            "Skew:                           0.141   Prob(JB):                       0.0127\n",
            "Kurtosis:                       2.016   Cond. No.                         48.9\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "\n",
            "r_squared 0.12224190399478618\n",
            "With a linear regression model, the Sales is 10 ad spends on Radio is 18.223786672385913\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df['Sales']  \n",
        "Y = df['Newspaper'].values  #ndarray\n",
        "X= np.array(X)\n",
        "Y= np.array(Y)\n",
        "regr = LinearRegression()\n",
        "regr.fit(X.reshape(-1, 1),Y)\n",
        "\n",
        "print('Coefficients:', regr.coef_)#Coefficients: [712.59413615]\n",
        "print('Intercept:', regr.intercept_)#Intercept: 5049.009899813836\n",
        "\n",
        "plt.plot(X, regr.predict(X.reshape(-1, 1)), color='mediumvioletred', linewidth=3)\n",
        "plt.scatter(X, Y, color='darkturquoise')\n",
        "plt.xlabel('Sales')\n",
        "plt.ylabel('Newspaper')\n",
        "plt.show()\n",
        "#calculate predictions based on the regression line\n",
        "predicted = map(lambda new_x: regr.predict([new_x]),X.reshape(-1, 1))\n",
        "b = list(predicted)\n",
        "\n",
        "# calculate R-squared\n",
        "R_2 = r2_score(Y, b) \n",
        "print('R-squared, or the Coefficient of Determination =', R_2) \n",
        "\n",
        "X2 = sm.add_constant(X)\n",
        "est = sm.OLS(Y, X2)\n",
        "est2 = est.fit()\n",
        "print()\n",
        "print(est2.summary())\n",
        "print()\n",
        "r_squared = regr.score(X.reshape(-1, 1), Y)\n",
        "print('r_squared',r_squared)\n",
        "\n",
        "# predicting a new result\n",
        "Sales_to_estimate = 10\n",
        "Newspaper_estimate = regr.predict([[Sales_to_estimate]])\n",
        "print('With a linear regression model, the Sales is', Sales_to_estimate, 'ad spends on Newspaper is' ,Newspaper_estimate[0])\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 835
        },
        "id": "WZlBEYHEnpO2",
        "outputId": "77ed4911-9d5e-402a-abd6-1b45d3b50ba4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Coefficients: [0.6510639]\n",
            "Intercept: 20.703077603382923\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "R-squared, or the Coefficient of Determination = 0.024951369862865058\n",
            "\n",
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                      y   R-squared:                       0.025\n",
            "Model:                            OLS   Adj. R-squared:                  0.020\n",
            "Method:                 Least Squares   F-statistic:                     5.067\n",
            "Date:                Wed, 08 Feb 2023   Prob (F-statistic):             0.0255\n",
            "Time:                        22:45:24   Log-Likelihood:                -896.95\n",
            "No. Observations:                 200   AIC:                             1798.\n",
            "Df Residuals:                     198   BIC:                             1804.\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const         20.7031      4.634      4.467      0.000      11.564      29.842\n",
            "x1             0.6511      0.289      2.251      0.025       0.081       1.221\n",
            "==============================================================================\n",
            "Omnibus:                       23.930   Durbin-Watson:                   1.860\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):               28.730\n",
            "Skew:                           0.851   Prob(JB):                     5.77e-07\n",
            "Kurtosis:                       3.741   Cond. No.                         48.9\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
            "\n",
            "r_squared 0.024951369862865058\n",
            "With a linear regression model, the Sales is 10 ad spends on Newspaper is 27.213716641496053\n"
          ]
        }
      ]
    }
  ]
}
