# -*- coding: utf-8 -*-
"""The Birthday Paradox

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xyT6v6FEWgKghD-stWQoniVDREpTFZVi
"""

import random
import time 
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from scipy.stats import gaussian_kde
import seaborn as sns
# repeat 300 time for this behave(loop):  (I'm not sure what the question requirment.I just want to said how i think in this code)
#         I assume that: There have many people they have random id(range(0,5000)),and go into a room one by one.       
#         I should find the 1st person who have the same id compare to everyone who already at the room.
def compare_random_birthday(Klist,n,m):
  for i in range(0,m):                                 # loop 300(n) times
    k= 0                                                  
    birthdaylist = []                                       # a empty list 
    while len(birthdaylist) == len(set(birthdaylist)):      # while: birthdaylist do not have a duplicate number is the list(loop); when have two number have same value(stop).
        x = random.randint(0,n)                             # a random number(0,5000) x
        birthdaylist.append(x)                              # add x in the birthdaylist
        k = k+1                                             # times(k)++, to know how many times get a random number.
    Klist.append(k)                                   
#  print(Klist)
  return Klist

def graph(Klist):
  pd.DataFrame(Klist).plot(kind='density')
  plt.xlim(0,300)
  plt.xlabel('k')
  plt.ylabel('density')
  plt.show() 

def graph2(Klist):
  sns.kdeplot(Klist)
  plt.xlim(0,300) 
  plt.xlabel('k')
  plt.ylabel('density')
  plt.show()   
if __name__ == '__main__':
    def test():
        m = 300
        n = 5000 
        Klist=[]
        Klist = compare_random_birthday(Klist,n,m)
        graph(Klist)
        graph2(Klist)
    test()