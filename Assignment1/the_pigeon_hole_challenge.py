# -*- coding: utf-8 -*-
"""The Pigeon Hole Challenge

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GI9yv_XC8fqgLarXirAJ_-4_T3a5ZdNx
"""

import matplotlib.pyplot as plt
import numpy as np
import time 
import random
import pandas as pd
from scipy.stats import gaussian_kde
import seaborn as sns
def CreateArray(n):
    halfN = n/2
    k = 0
    bcount =0
    times=0
    mylist = []                             
  #bcount=bcount+1
    while len(mylist) < n:
        x= random.randint(0,n)               
        k=k+1
        if len(set(mylist)) < halfN:
          if x not in mylist:     
               mylist.append(x)
          elif x in mylist and mylist.count(x) < 2 :
               mylist.append(x)
        if len(set(mylist)) == halfN:
          if x in mylist and mylist.count(x) < 2 :
               mylist.append(x)
       

 #   print("uniqueList(once) = ", set(mylist))        
 #   print("k =", k)   
 #   print("length mylist=", len(mylist))   
 #   print("mylist = ", mylist)
    return k
#    
def repeatCreate(n,m,Klist):
    for item in range(0,m):
        Klist.append(CreateArray(n))
    return Klist
# try to draw a desity graph(In fact i do not know which is desity graph)
def graphPlot(Klist):
    x = np.array(Klist)
    y = np.arange(400)
    xy = np.vstack([x,y])
    z = gaussian_kde(xy)(xy)  
    idx = np.argsort(z)
    x, y, z = x[idx], y[idx], z[idx]
    fig, ax = plt.subplots()
    plt.scatter(x, y,c=z,  s=20,cmap='Spectral')
    plt.colorbar()
    plt.xlabel('k')
    plt.ylabel('Repeat 400 times')
    plt.show() 
# try to draw a desity graph(In fact i do not know which is desity graph)
def graphDesity(Klist):
    pd.DataFrame(Klist).plot(kind='density')
    plt.xlabel('k')
    plt.show()   
# try to draw a desity graph(In fact i do not know which is desity graph)
def graphDesity2(Klist):
    df = np.array(Klist)
    plt.xlabel('k')
    res = sns.distplot(df)
    plt.show()

if __name__ == '__main__':
    def test():
        n = 300
        m = 400
        Klist=[]
        start = time.time()
#        CreateArray(n)
        Klist = repeatCreate(n,m,Klist)
        end = time.time() 
 #       print("Klist = ", Klist)
        print('running time: ',end - start)
        graphDesity(Klist)
        graphDesity2(Klist)
        graphPlot(Klist)
    test()